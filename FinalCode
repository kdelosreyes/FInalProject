#include <NewPing.h>

//#define TRIGGER_PIN 12
//#define ECHO_PIN 11
#define SONAR_NUM     2 // Number of sensors.
#define MAX_DISTANCE 200 // Maximum distance (in cm) to ping.
#define PING_INTERVAL 33 // Milliseconds between sensor pings (29ms is about the min to avoid cross-sensor echo).

unsigned long pingTimer[SONAR_NUM]; // Holds the times when the next ping should happen for each sensor.
unsigned int cm[SONAR_NUM];         // Where the ping distances are stored.
uint8_t currentSensor = 0;          // Keeps track of which sensor is active.
NewPing sonar[SONAR_NUM] = {     // Sensor object array.
  NewPing(9, 8, MAX_DISTANCE), // Each sensor's trigger pin, echo pin, and max distance to ping.
  NewPing(12, 11, MAX_DISTANCE),
};

#include <Adafruit_Fingerprint.h>
#include <SoftwareSerial.h>

int getFingerprintIDez();

// pin #2 is IN from sensor (GREEN wire)
// pin #3 is OUT from arduino  (WHITE wire)
SoftwareSerial mySerial(2, 3);

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

// On Leonardo/Micro or others with hardware serial, use those! #0 is green wire, #1 is white
//Adafruit_Fingerprint finger = Adafruit_Fingerprint(&Serial1);

void setup() {
  while (!Serial);  // For Yun/Leo/Micro/Zero/...
  Serial.begin(115200);
 
 
  pingTimer[0] = millis() + 75;           // First ping starts at 75ms, gives time for the Arduino to chill before starting.
  for (uint8_t i = 1; i < SONAR_NUM; i++) // Set the starting time for each sensor.
    pingTimer[i] = pingTimer[i - 1] + PING_INTERVAL;
  
     Serial.println("Adafruit finger detect test");
    // set the data rate for the sensor serial port
//  finger.begin(57600);
//
//    if (finger.verifyPassword()) {
//    Serial.println("Found fingerprint sensor!");
//  } else {
//    Serial.println("Did not find fingerprint sensor :(");
//    while (1);
//  }
//  Serial.println("Waiting for valid finger...");

}

void loop() {
//  getFingerprintIDez();
//  delay(50);            //don't ned to run this at full speed.
  
  for (uint8_t i = 0; i < SONAR_NUM; i++) { // Loop through all the sensors.
    if (millis() >= pingTimer[i]) {         // Is it this sensor's time to ping?
      pingTimer[i] += PING_INTERVAL * SONAR_NUM;  // Set next time this sensor will be pinged.
      if (i == 0 && currentSensor == SONAR_NUM - 1) oneSensorCycle(); // Sensor ping cycle complete, do something with the results.
      sonar[currentSensor].timer_stop();          // Make sure previous timer is canceled before starting a new ping (insurance).
      currentSensor = i;                          // Sensor being accessed.
      cm[currentSensor] = 0;                      // Make distance zero in case there's no ping echo for this sensor.
      sonar[currentSensor].ping_timer(echoCheck); // Do the ping (processing continues, interrupt will call echoCheck to look for echo).
    }
    
  }
  //fingerprint scanner code
  //if (currentSensor < 80) {  //if fingerprint scanner is over 80 cm away, it will not be responsive.
//  uint8_t getFingerprintID() {
//  uint8_t p = finger.getImage();
//  switch (p) {
//    case FINGERPRINT_OK:
//      Serial.println("Processing");
//      break;
//    case FINGERPRINT_NOFINGER:
//      Serial.println("No Finger Detected");
//      return p;
//    case FINGERPRINT_PACKETRECIEVEERR:
//      Serial.println("Error:Scan Again");
//      return p;
//    case FINGERPRINT_IMAGEFAIL:
//      Serial.println("Error:Scan Again");
//      return p;
//    default:
//      Serial.println("Work ID Invalid");
//      return p;
//  }
//
//  // OK success!
//
//  p = finger.image2Tz();
//  switch (p) {
//    case FINGERPRINT_OK:
//      Serial.println("Processing");
//      break;
//    case FINGERPRINT_IMAGEMESS:
//      Serial.println("Error:Scan Again");
//      return p;
//    case FINGERPRINT_PACKETRECIEVEERR:
//      Serial.println("Error:Scan Again");
//      return p;
//    case FINGERPRINT_FEATUREFAIL:
//      Serial.println("Could not read print:Scan Again");
//      return p;
//    case FINGERPRINT_INVALIDIMAGE:
//      Serial.println("Could not read print:Scan Again");
//      return p;
//    default:
//      Serial.println("Unknown error");
//      return p;
//  }
//
//  // OK converted!
//  p = finger.fingerFastSearch();
//  if (p == FINGERPRINT_OK) {
//    Serial.println("Successs Krystel Delos Reyes Work ID 2045833 05/02/2016 9:14AM");
//  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
//    Serial.println("Error:Scan Again");
//    return p;
//  } else if (p == FINGERPRINT_NOTFOUND) {
//    Serial.println("Work ID Invalid");
//    return p;
//  } else {
//    Serial.println("Unknown error");
//    return p;
//  }
//
//  // found a match!
//  Serial.print("Successs Krystel Delos Reyes Work ID 2045833 05/02/2016 9:14AM"); Serial.print(finger.fingerID);
//  Serial.print(" with confidence of "); Serial.println(finger.confidence);
//}
//
//// returns -1 if failed, otherwise returns ID #
//int getFingerprintIDez() {
//  uint8_t p = finger.getImage();
//  if (p != FINGERPRINT_OK)  return -1;
//
//  p = finger.image2Tz();
//  if (p != FINGERPRINT_OK)  return -1;
//
//  p = finger.fingerFastSearch();
//  if (p != FINGERPRINT_OK)  return -1;
//
//  // found a match!
//  Serial.print("Successs Krystel Delos Reyes Work ID 2045833 05/02/2016 9:14AM"); Serial.print(finger.fingerID);
//  Serial.print(" with confidence of "); Serial.println(finger.confidence);
//  return finger.fingerID;
//}
  //}
  // Other code that *DOESN'T* analyze ping results can go here.
}

void echoCheck() { // If ping received, set the sensor distance to array.
  if (sonar[currentSensor].check_timer())
    cm[currentSensor] = sonar[currentSensor].ping_result / US_ROUNDTRIP_CM;
}

void oneSensorCycle() { // Sensor ping cycle complete, do something with the results.
  // The following code would be replaced with your code that does something with the ping results.
  for (uint8_t i = 0; i < SONAR_NUM; i++) {
    Serial.print(i);
    Serial.print("=");
    Serial.print(cm[i]);
    Serial.print("cm ");
  }
  Serial.println();
}
